// <auto-generated />
using System;
using DataAccessLayer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250818063246_migrationnn")]
    partial class migrationnn
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EmployeeAdminPortal.Models.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("WorkScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("RoleId");

                    b.HasIndex("WorkScheduleId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Models.Models.Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreatedAt = new DateTime(2025, 8, 18, 10, 32, 45, 705, DateTimeKind.Local).AddTicks(5925),
                            Description = "Information Technology Department",
                            Name = "IT"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreatedAt = new DateTime(2025, 8, 18, 10, 32, 45, 705, DateTimeKind.Local).AddTicks(5929),
                            Description = "Marketing Department",
                            Name = "Marketing"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedAt = new DateTime(2025, 8, 18, 10, 32, 45, 705, DateTimeKind.Local).AddTicks(5932),
                            Description = "Finance Department",
                            Name = "Finance"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            CreatedAt = new DateTime(2025, 8, 18, 10, 32, 45, 705, DateTimeKind.Local).AddTicks(5935),
                            Description = "Human Resources Department",
                            Name = "HR"
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            CreatedAt = new DateTime(2025, 8, 18, 10, 32, 45, 705, DateTimeKind.Local).AddTicks(5939),
                            Description = "Sales Department",
                            Name = "Sales"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            CreatedAt = new DateTime(2025, 8, 18, 10, 32, 45, 705, DateTimeKind.Local).AddTicks(5942),
                            Description = "Operations Department",
                            Name = "Operations"
                        });
                });

            modelBuilder.Entity("Models.Models.Entities.EmployeeTimeLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CheckInTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CheckOutTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan?>("WorkDuration")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeTimeLogs");
                });

            modelBuilder.Entity("Models.Models.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedAt = new DateTime(2025, 8, 18, 10, 32, 45, 705, DateTimeKind.Local).AddTicks(5948),
                            Description = "Company Boss - Full Access",
                            Name = "Boss"
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            CreatedAt = new DateTime(2025, 8, 18, 10, 32, 45, 705, DateTimeKind.Local).AddTicks(5951),
                            Description = "IT Department Boss",
                            Name = "Boss-IT"
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            CreatedAt = new DateTime(2025, 8, 18, 10, 32, 45, 705, DateTimeKind.Local).AddTicks(5954),
                            Description = "Marketing Department Boss",
                            Name = "Boss-Marketing"
                        },
                        new
                        {
                            Id = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            CreatedAt = new DateTime(2025, 8, 18, 10, 32, 45, 705, DateTimeKind.Local).AddTicks(5958),
                            Description = "Finance Department Boss",
                            Name = "Boss-Finance"
                        },
                        new
                        {
                            Id = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            CreatedAt = new DateTime(2025, 8, 18, 10, 32, 45, 705, DateTimeKind.Local).AddTicks(5961),
                            Description = "HR Department Boss",
                            Name = "Boss-HR"
                        },
                        new
                        {
                            Id = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff"),
                            CreatedAt = new DateTime(2025, 8, 18, 10, 32, 45, 705, DateTimeKind.Local).AddTicks(5964),
                            Description = "Sales Department Boss",
                            Name = "Boss-Sales"
                        },
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777777"),
                            CreatedAt = new DateTime(2025, 8, 18, 10, 32, 45, 705, DateTimeKind.Local).AddTicks(5967),
                            Description = "Operations Department Boss",
                            Name = "Boss-Operations"
                        },
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888888"),
                            CreatedAt = new DateTime(2025, 8, 18, 10, 32, 45, 705, DateTimeKind.Local).AddTicks(5970),
                            Description = "Regular Employee",
                            Name = "Employee"
                        });
                });

            modelBuilder.Entity("Models.Models.Entities.WorkSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MaxEarlyLeaveMinutes")
                        .HasColumnType("int");

                    b.Property<int>("MaxLatenessMinutes")
                        .HasColumnType("int");

                    b.Property<int>("MinimumWorkMinutes")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RequiredWorkHours")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("WorkSchedules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("99999999-9999-9999-9999-999999999991"),
                            CreatedAt = new DateTime(2025, 8, 18, 10, 32, 45, 705, DateTimeKind.Local).AddTicks(5903),
                            Description = "Standard 8:00-17:00 work schedule",
                            EndTime = new TimeSpan(0, 17, 0, 0, 0),
                            IsActive = true,
                            MaxEarlyLeaveMinutes = 15,
                            MaxLatenessMinutes = 15,
                            MinimumWorkMinutes = 480,
                            Name = "8-17",
                            RequiredWorkHours = 8,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("99999999-9999-9999-9999-999999999992"),
                            CreatedAt = new DateTime(2025, 8, 18, 10, 32, 45, 705, DateTimeKind.Local).AddTicks(5910),
                            Description = "Standard 9:00-18:00 work schedule",
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            IsActive = true,
                            MaxEarlyLeaveMinutes = 15,
                            MaxLatenessMinutes = 15,
                            MinimumWorkMinutes = 480,
                            Name = "9-18",
                            RequiredWorkHours = 8,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("99999999-9999-9999-9999-999999999993"),
                            CreatedAt = new DateTime(2025, 8, 18, 10, 32, 45, 705, DateTimeKind.Local).AddTicks(5914),
                            Description = "Morning shift 9:00-14:00",
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            IsActive = true,
                            MaxEarlyLeaveMinutes = 10,
                            MaxLatenessMinutes = 10,
                            MinimumWorkMinutes = 300,
                            Name = "9-14",
                            RequiredWorkHours = 5,
                            StartTime = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("99999999-9999-9999-9999-999999999994"),
                            CreatedAt = new DateTime(2025, 8, 18, 10, 32, 45, 705, DateTimeKind.Local).AddTicks(5919),
                            Description = "Afternoon shift 14:00-18:00",
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            IsActive = true,
                            MaxEarlyLeaveMinutes = 10,
                            MaxLatenessMinutes = 10,
                            MinimumWorkMinutes = 240,
                            Name = "14-18",
                            RequiredWorkHours = 4,
                            StartTime = new TimeSpan(0, 14, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("EmployeeAdminPortal.Models.Entities.Employee", b =>
                {
                    b.HasOne("Models.Models.Entities.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Models.Models.Entities.Role", "Role")
                        .WithMany("Employees")
                        .HasForeignKey("RoleId");

                    b.HasOne("Models.Models.Entities.WorkSchedule", "WorkSchedule")
                        .WithMany("Employees")
                        .HasForeignKey("WorkScheduleId");

                    b.Navigation("Department");

                    b.Navigation("Role");

                    b.Navigation("WorkSchedule");
                });

            modelBuilder.Entity("Models.Models.Entities.EmployeeTimeLog", b =>
                {
                    b.HasOne("EmployeeAdminPortal.Models.Entities.Employee", "Employee")
                        .WithMany("TimeLogs")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("EmployeeAdminPortal.Models.Entities.Employee", b =>
                {
                    b.Navigation("TimeLogs");
                });

            modelBuilder.Entity("Models.Models.Entities.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Models.Models.Entities.Role", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Models.Models.Entities.WorkSchedule", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
